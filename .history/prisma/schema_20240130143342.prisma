generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  binaryTargets   = ["native"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Blog {
  id            String            @id @default(uuid())
  name          String
  userId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  billboards    BillboardBlog[]   @relation("BlogToBillboard")
  categories    CategoryBlog[]    @relation("BlogToCategoryBlog")
  authors       Author[]          @relation("BlogToAuthor")
  subCategories SubCategoryBlog[] @relation("BlogToSubCategoryBlog")
  projects      Project[]
}

model BillboardBlog {
  id            String            @id @default(uuid())
  blogId        String
  label         String
  imageUrl      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  blog          Blog              @relation("BlogToBillboard", fields: [blogId], references: [id])
  authors       Author[]          @relation("BillboardToAuthor")
  categories    CategoryBlog[]
  subCategories SubCategoryBlog[] @relation("BillboardBlogToSubCategoryBlog")

  @@index([blogId])
}

model CategoryBlog {
  id              String            @id @default(uuid())
  blogId          String
  billboardBlogId String
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  blog            Blog              @relation("BlogToCategoryBlog", fields: [blogId], references: [id])
  billboard       BillboardBlog     @relation(fields: [billboardBlogId], references: [id])
  subcategories   SubCategoryBlog[] @relation("CategoryBlogToSubCategoryBlog")
  blogarticles    Blogarticle[]

  @@index([blogId])
  @@index([billboardBlogId])
}

model SubCategoryBlog {
  id              String        @id @default(uuid())
  blogId          String
  billboardBlogId String
  categoryBlogId  String
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  blog            Blog          @relation("BlogToSubCategoryBlog", fields: [blogId], references: [id])
  billboard       BillboardBlog @relation("BillboardBlogToSubCategoryBlog", fields: [billboardBlogId], references: [id])
  categoryBlog    CategoryBlog  @relation("CategoryBlogToSubCategoryBlog", fields: [categoryBlogId], references: [id])
  articles        Blogarticle[]

  @@index([blogId])
  @@index([billboardBlogId])
  @@index([categoryBlogId])
}

model Blogarticle {
  id          String           @id @default(uuid())
  userId      String
  title       String           @db.Text
  description String?          @db.Text
  imageUrl    String?          @db.Text
  price       Float?
  isPublished Boolean          @default(false)
  categoryId  String?
  subcatId    String?          
  authorId    String?
   youtubeUrl  String?
  isYoutube   Boolean?         @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    CategoryBlog?    @relation(fields: [categoryId], references: [id])
  subcategory SubCategoryBlog? @relation( fields: [subcatId], references: [id])
  author      Author?          @relation(fields: [authorId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]

  @@index([categoryId])
  
}

model Attachment {
  id            String      @id @default(uuid())
  name          String
  url           String      @db.Text
  blogArticleId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  article       Blogarticle @relation(fields: [blogArticleId], references: [id], onDelete: Cascade)

  @@index([blogArticleId])
}

model Chapter {
  id            String         @id @default(uuid())
  title         String
  description   String?        @db.Text
  videoUrl      String?        @db.Text
  imageUrl      String?        @db.Text
  position      Int
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)
  href          String?
  blogarticleId String
  youtubeUrl  String?
  isYoutube   Boolean?         @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  muxData       MuxData?
  course        Blogarticle    @relation(fields: [blogarticleId], references: [id], onDelete: Cascade)
  userProgress  UserProgress[]

  @@index([blogarticleId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Author {
  id              String        @id @default(uuid())
  blogId          String
  billboardBlogId String
  firstName       String
  lastName        String
  email           String
  image           String
  descriptionLong     String?
  title           String?
  title2          String?
  title3          String?
  title4           String?
  twitter         String?
  facebook        String?
  instagram       String?
  github          String?
  linkedIn        String?
  buyMeACoffee    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  blog            Blog          @relation("BlogToAuthor", fields: [blogId], references: [id])
  billboard       BillboardBlog @relation("BillboardToAuthor", fields: [billboardBlogId], references: [id])
  articles        Blogarticle[]
  qualifications  Qualification[]
  porfolioPosts   PortfolioPost[]

  @@index([blogId])
}

model Project {
  id            String         @id @default(uuid()) @map("_id")
  name          String         @unique
  description   String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  blogId        String
  projectBoards ProjectBoard[]
  blog          Blog           @relation(fields: [blogId], references: [id])

  @@index([blogId])
}

model ProjectBoard {
  id        String    @id @default(uuid()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String
  order     Int
  slug      String
  projectId String
  features  Feature[]
  project   Project   @relation(fields: [projectId], references: [id])

  @@unique([slug, status, projectId])
}

model Feature {
  id             String       @id @default(uuid()) @map("_id")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  slug           String
  name           String
  description    String
  priority       Priority
  finishDate     DateTime
  order          Int
  projectBoardId String
  projectBoard   ProjectBoard @relation(fields: [projectBoardId], references: [id])

  @@unique([slug, projectBoardId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}





model Billboard {
  id        String   @id
  storeId   String
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([storeId])
}

model Category {
  id          String   @id
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([billboardId])
  @@index([storeId])
}

model Color {
  id        String   @id
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([storeId])
}

model Image {
  id        String   @id
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([productId])
}

model Order {
  id        String   @id
  storeId   String
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([storeId])
}

model OrderItem {
  id        String @id
  orderId   String
  productId String

  @@index([orderId])
  @@index([productId])
}

model Product {
  id         String   @id
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  colorId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
  @@index([storeId])
}

model Size {
  id        String   @id
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([storeId])
}

model Store {
  id        String   @id
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
}


//Workplace

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists         List[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model List {
  id        String @id @default(uuid())
  title     String
  order     Int

  boardId   String
  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards     Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  listId      String
  list        List  @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  WHITEBOARD
}


model AuditLog {
  id          String  @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.Text
  userName    String @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}


///==============================================================================================================

model Qualification {
    id          String  @id @default(uuid())
    name        String
    institute   String 
    calendarBegin DateTime
    calendarEnd    DateTime
    type          QualifType
    position      String 
    author        Author @relation(fields: [authorId], references: [id])
    authorId      String


    createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}

enum QualifType {
  EDUCATION
  EXPERIENCE
    
}

model PortfolioPost{
id          String  @id @default(uuid())
title       String 
description String 
technologies String []
addressPost String
type        PortfolioType
problem      String
solution     String 
feature      String[]
year         Int 
authorId     String
author       Author  @relation(fields: [authorId], references: [id])

createdAt   DateTime @default(now())
updatedAt   DateTime  @updatedAt

}


enum PortfolioType {
  WEB  
  APP 
  AI  
  DATA_ANALySIS
}